new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {
print("installing : ")
print(new.packages)
install.packages(new.packages, repos="http://cran.us.r-project.org")
}
#-------------------------------------------------------------------------------
# Copyright (c) 2012 University of Illinois, NCSA.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the
# University of Illinois/NCSA Open Source License
# which accompanies this distribution, and is available at
# http://opensource.ncsa.illinois.edu/license.html
#-------------------------------------------------------------------------------
list.of.packages <- c('XML','Hmisc','testthat','signal')
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) {
print("installing : ")
print(new.packages)
install.packages(new.packages, repos="http://cran.us.r-project.org")
}
library(roxygen2)
roxygenise('/Users/serbin/Data/Dropbox/FERST_Code/FieldSpectra/R_dev/')
library(roxygen2)
roxygenise('/Users/serbin/Data/Dropbox/FERST_Code/FieldSpectra/R_dev/')
file.dir <- '/Users/serbin/Data/Dropbox/spectacular/Testing/averaged_files/'
concat.spectra <- function(file.dir=NULL,out.dir=NULL,out.filename=NULL,out.file.ext=".csv",
transpose=FALSE,spec.dataframe=FALSE){
dlm <- .Platform$file.sep # <--- What is the platform specific delimiter?
### Check for proper input
if (is.null(file.dir)){
print("*********************************************************************************")
stop("******* ERROR: No input file directory given.  Please correct. *******")
} else if (!is.null(file.dir)){
file.dir <- file.dir
}
### Check for output directory
if (is.null(out.dir)){
out.dir <- file.dir
} else {
out.dir <- out.dir
}
#NOT YET IMPLEMENTED
print(file.dir)
print(out.dir)
print(out.filename)
} ### End of function
concat.spectra(file.dir=file.dir,out.filename="test.concat")
library(roxygen2)
roxygenise('/Users/serbin/Data/Dropbox/FERST_Code/FieldSpectra/R_dev/')
in.files <- list.files(path=file.dir,pattern=in.file.ext,full.names=FALSE)
in.file.ext=".csv"
in.files <- list.files(path=file.dir,pattern=in.file.ext,full.names=FALSE)
in.files
in.files.full <- list.files(path=file.dir,pattern=in.file.ext,full.names=TRUE)
in.files.full
length(in.files)
num.files = 0
if (num.files<1) stop("****** No files found in directory: ",file.dir," ******")
for (i in 1:num.files) {
print(i)
}
num.files <- length(in.files)
for (i in 1:num.files) {
print(i)
}
### Display info to the terminal
tmp  <- unlist(strsplit(file.dir,dlm))
current <- tmp[length(tmp)]
print(paste("------- Processing directory: ",current))
print(paste("------- Number of files: ",num.files))
flush.console() #<--- show output in real-time
dlm <- .Platform$file.sep # <--- What is the platform specific delimiter?
### Display info to the terminal
tmp  <- unlist(strsplit(file.dir,dlm))
current <- tmp[length(tmp)]
print(paste("------- Processing directory: ",current))
print(paste("------- Number of files: ",num.files))
flush.console() #<--- show output in real-time
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
i=1
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
rstudio::viewData(spec.file)
rstudio::viewData(spec.file)
dims <- dim(spec.file)
dims
max(dims)
in.spec <- array(data=NA,dim=c(num.files,max(dims)))
spec.names <- unlist(strsplit(in.files,paste("\\",in.file.ext,sep="")))
spec.names
i=1
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.spec[i,] <- t(spec.file[,2])
rm(spec.file)
rstudio::viewData(in.spec)
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
rstudio::viewData(spec.file)
in.waves <- spec.file[,1]
in.waves
in.spec <- array(data=NA,dim=c(num.files,max(dims)))
### Read in files to concatenate
for (i in 1:num.files){
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.spec[i,] <- t(spec.file[,2])
rm(spec.file)
}
in.spec
### Concatenate
if (transpose){
print("*** NOT YET IMPLEMENTED ***")
} else {
print("HI")
}
transpose=FALSE
### Concatenate
if (transpose){
print("*** NOT YET IMPLEMENTED ***")
} else {
print("HI")
}
dims
out.spec <- t(in.spec)
rstudio::viewData(out.spec)
out.spec <- 1
out.spec$Wavelengths <- in.waves
out.spec <- 1
out.spec <- array(data=NA,dim=c(max(dims),num.files))
rstudio::viewData(out.spec)
out.spec <- array(data=NA,dim=c(max(dims),num.files+1))
out.spec[,1] <- in.waves
rstudio::viewData(in.spec)
rstudio::viewData(out.spec)
out.spec[,2:num.files] <- t(in.spec)
rstudio::viewData(out.spec)
2:num.files
2:num.files+1
(2:num.files)+1
2:(num.files+1)
out.spec[,2:(num.files+1)] <- t(in.spec)
rstudio::viewData(out.spec)
spec.names
names(out.spec) <- c("Wavelength",spec.names)
rstudio::viewData(out.spec)
out.spec
out.spec <- as.data.frame(out.spec)
rstudio::viewData(out.spec)
names(out.spec) <- c("Wavelength",spec.names)
rstudio::viewData(out.spec)
in.files
in.files[i]
rstudio::viewData(out.spec)
out.filename=NULL
### Check for output filename
if (!is.null(out.filename)){
out.filename <- out.filename
} else {
out.filename <- "Concat_Spectra"
}
out.filename
paste(out.dir,dlm,out.filename,out.file.ext,sep="")
out.dir=NULL
### Check for output directory
if (is.null(out.dir)){
out.dir <- file.dir
} else {
out.dir <- out.dir
}
out.dir
paste(out.dir,dlm,out.filename,out.file.ext,sep="")
out.file.ext=".csv"
paste(out.dir,dlm,out.filename,out.file.ext,sep="")
write.csv(out.spec,paste(out.dir,dlm,out.filename,out.file.ext,sep=""),row.names=FALSE)
concat.spectra <- function(file.dir=NULL,out.dir=NULL,out.filename=NULL,in.file.ext=".csv",
out.file.ext=".csv",transpose=FALSE,spec.dataframe=FALSE){
dlm <- .Platform$file.sep # <--- What is the platform specific delimiter?
### Check for proper input
if (is.null(file.dir)){
print("*********************************************************************************")
stop("******* ERROR: No input file directory given.  Please correct. *******")
} else if (!is.null(file.dir)){
file.dir <- file.dir
}
### Check for output directory
if (is.null(out.dir)){
out.dir <- file.dir
} else {
out.dir <- out.dir
}
if (!file.exists(out.dir)) dir.create(out.dir,recursive=TRUE)
### Check for output filename
if (!is.null(out.filename)){
out.filename <- out.filename
} else {
out.filename <- "Concat_Spectra"
}
### Get file list
in.files <- list.files(path=file.dir,pattern=in.file.ext,full.names=FALSE)
in.files.full <- list.files(path=file.dir,pattern=in.file.ext,full.names=TRUE)
num.files <- length(in.files)
spec.names <- unlist(strsplit(in.files,paste("\\",in.file.ext,sep="")))
### Stop if no files found
if (num.files<1) stop("****** No files found in directory: ",file.dir," ******")
### Display info to the terminal
tmp  <- unlist(strsplit(file.dir,dlm))
current <- tmp[length(tmp)]
print(paste("------- Processing directory: ",current))
print(paste("------- Number of files: ",num.files))
flush.console() #<--- show output in real-time
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.waves <- spec.file[,1]
dims <- dim(spec.file)
in.spec <- array(data=NA,dim=c(num.files,max(dims)))
### Read in files to concatenate
for (i in 1:num.files){
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.spec[i,] <- t(spec.file[,2])
rm(spec.file)
}
### Concatenate
if (transpose){
# If transpose requested
print("*** NOT YET IMPLEMENTED ***")
} else {
out.spec <- array(data=NA,dim=c(max(dims),num.files+1))
out.spec[,1] <- in.waves
out.spec[,2:(num.files+1)] <- t(in.spec)
out.spec <- as.data.frame(out.spec)
names(out.spec) <- c("Wavelength",spec.names)
}
### Output dataframe if requested
if (spec.dataframe){
return(out.spec)
}
### Output concatenated data
write.csv(out.spec,paste(out.dir,dlm,out.filename,out.file.ext,sep=""),row.names=FALSE)
} ### End of function
file.dir <- '/Users/serbin/Data/Dropbox/spectacular/Testing/averaged_files/'
concat.spectra(file.dir=file.dir,out.filename="test.concat")
out.spec <- array(data=NA,dim=c(num.files+1,max(dims)))
rstudio::viewData(out.spec)
out.spec <- array(data=NA,dim=c(num.files,max(dims)))
out.spec <- in.spec
rstudio::viewData(out.spec)
out.spec <- as.data.frame(out.spec)
rstudio::viewData(out.spec)
out.spec <- as.data.frame(spec.names,in.spec)
spec.names
out.spec <- data.frame(spec.names,in.spec)
rstudio::viewData(out.spec)
rm(out.spec)
dims
spec.names
dims[1]>dims[2]
out.spec <- array(data=NA,dim=c(num.files,max(dims)))
out.spec <- array(data=NA,dim=c(num.files,max(dims)+1))
out.spec <- as.data.frame(out.spec)
out.spec[,1] <- spec.names
rstudio::viewData(out.spec)
dims <- dim(out.spec)
dims
out.spec[,2:dims[2]] <- as.data.frame(in.spec)
rstudio::viewData(out.spec)
names(out.spec) <- c("Spectra",paste("Wave_",in.waves,sep=""))
rstudio::viewData(out.spec)
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.waves <- spec.file[,1]
dims <- dim(spec.file)
if (dims[2]>dims[1]) stop("***** ERROR: Input spectral files are not properly formatted for this function *****")
in.spec <- array(data=NA,dim=c(num.files,max(dims)))
### Read in files to concatenate
for (i in 1:num.files){
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.spec[i,] <- t(spec.file[,2])
rm(spec.file)
}
dims[1]>dims[2]
concat.spectra <- function(file.dir=NULL,out.dir=NULL,out.filename=NULL,in.file.ext=".csv",
out.file.ext=".csv",transpose=FALSE,spec.dataframe=FALSE){
dlm <- .Platform$file.sep # <--- What is the platform specific delimiter?
### Check for proper input
if (is.null(file.dir)){
print("*********************************************************************************")
stop("******* ERROR: No input file directory given.  Please correct. *******")
} else if (!is.null(file.dir)){
file.dir <- file.dir
}
### Check for output directory
if (is.null(out.dir)){
out.dir <- file.dir
} else {
out.dir <- out.dir
}
if (!file.exists(out.dir)) dir.create(out.dir,recursive=TRUE)
### Check for output filename
if (!is.null(out.filename)){
out.filename <- out.filename
} else {
out.filename <- "Concat_Spectra"
}
### Get file list
in.files <- list.files(path=file.dir,pattern=in.file.ext,full.names=FALSE)
in.files.full <- list.files(path=file.dir,pattern=in.file.ext,full.names=TRUE)
num.files <- length(in.files)
spec.names <- unlist(strsplit(in.files,paste("\\",in.file.ext,sep="")))
### Stop if no files found
if (num.files<1) stop("****** No files found in directory: ",file.dir," ******")
### Display info to the terminal
tmp  <- unlist(strsplit(file.dir,dlm))
current <- tmp[length(tmp)]
print(paste("------- Processing directory: ",current))
print(paste("------- Number of files: ",num.files))
flush.console() #<--- show output in real-time
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.waves <- spec.file[,1]
dims <- dim(spec.file)
if (dims[2]>dims[1]) stop("***** ERROR: Input spectral files are not properly formatted for this function *****")
in.spec <- array(data=NA,dim=c(num.files,max(dims)))
### Read in files to concatenate
for (i in 1:num.files){
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.spec[i,] <- t(spec.file[,2])
rm(spec.file)
}
### Concatenate
# If transpose requested
if (transpose){
# Convert to Spectra,Wave_x, Wave_x
if (dims[1]>dims[2]){
out.spec <- array(data=NA,dim=c(num.files,max(dims)+1))
out.spec <- as.data.frame(out.spec)
out.spec[,1] <- spec.names
dims <- dim(out.spec)
out.spec[,2:dims[2]] <- as.data.frame(in.spec)
names(out.spec) <- c("Spectra",paste("Wave_",in.waves,sep=""))
}
} else {
out.spec <- array(data=NA,dim=c(max(dims),num.files+1))
out.spec[,1] <- in.waves
out.spec[,2:(num.files+1)] <- t(in.spec)
out.spec <- as.data.frame(out.spec)
names(out.spec) <- c("Wavelength",spec.names)
}
### Output dataframe if requested
if (spec.dataframe){
return(out.spec)
}
### Output concatenated data
write.csv(out.spec,paste(out.dir,dlm,out.filename,out.file.ext,sep=""),row.names=FALSE)
} ### End of function
#==================================================================================================#
concat.spectra(file.dir=file.dir,out.filename="test.concat")
paste(out.dir,out.filename,sep="")
concat.spectra <- function(file.dir=NULL,out.dir=NULL,out.filename=NULL,in.file.ext=".csv",
out.file.ext=".csv",transpose=FALSE,spec.dataframe=FALSE){
dlm <- .Platform$file.sep # <--- What is the platform specific delimiter?
### Check for proper input
if (is.null(file.dir)){
print("*********************************************************************************")
stop("******* ERROR: No input file directory given.  Please correct. *******")
} else if (!is.null(file.dir)){
file.dir <- file.dir
}
### Check for output directory
if (is.null(out.dir)){
out.dir <- file.dir
} else {
out.dir <- out.dir
}
if (!file.exists(out.dir)) dir.create(out.dir,recursive=TRUE)
### Check for output filename
if (!is.null(out.filename)){
out.filename <- out.filename
} else {
out.filename <- "Concat_Spectra"
}
### Remove existing file if present
unlink(paste(out.dir,out.filename,sep=""),recursive=FALSE,force=TRUE)
### Get file list
in.files <- list.files(path=file.dir,pattern=in.file.ext,full.names=FALSE)
in.files.full <- list.files(path=file.dir,pattern=in.file.ext,full.names=TRUE)
num.files <- length(in.files)
spec.names <- unlist(strsplit(in.files,paste("\\",in.file.ext,sep="")))
### Stop if no files found
if (num.files<1) stop("****** No files found in directory: ",file.dir," ******")
### Display info to the terminal
tmp  <- unlist(strsplit(file.dir,dlm))
current <- tmp[length(tmp)]
print(paste("------- Processing directory: ",current))
print(paste("------- Number of files: ",num.files))
flush.console() #<--- show output in real-time
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.waves <- spec.file[,1]
dims <- dim(spec.file)
if (dims[2]>dims[1]) stop("***** ERROR: Input spectral files are not properly formatted for this function *****")
in.spec <- array(data=NA,dim=c(num.files,max(dims)))
### Read in files to concatenate
for (i in 1:num.files){
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.spec[i,] <- t(spec.file[,2])
rm(spec.file)
}
### Concatenate
# If transpose requested
if (transpose){
# Convert to Spectra,Wave_x, Wave_x
if (dims[1]>dims[2]){
out.spec <- array(data=NA,dim=c(num.files,max(dims)+1))
out.spec <- as.data.frame(out.spec)
out.spec[,1] <- spec.names
dims <- dim(out.spec)
out.spec[,2:dims[2]] <- as.data.frame(in.spec)
names(out.spec) <- c("Spectra",paste("Wave_",in.waves,sep=""))
}
} else {
out.spec <- array(data=NA,dim=c(max(dims),num.files+1))
out.spec[,1] <- in.waves
out.spec[,2:(num.files+1)] <- t(in.spec)
out.spec <- as.data.frame(out.spec)
names(out.spec) <- c("Wavelength",spec.names)
}
### Output dataframe if requested
if (spec.dataframe){
return(out.spec)
}
### Output concatenated data
write.csv(out.spec,paste(out.dir,dlm,out.filename,out.file.ext,sep=""),row.names=FALSE)
} ### End of function
concat.spectra(file.dir=file.dir,out.filename="test.concat")
out.filename="test.concat"
concat.spectra <- function(file.dir=NULL,out.dir=NULL,out.filename=NULL,in.file.ext=".csv",
out.file.ext=".csv",transpose=FALSE,spec.dataframe=FALSE){
dlm <- .Platform$file.sep # <--- What is the platform specific delimiter?
### Check for proper input
if (is.null(file.dir)){
print("*********************************************************************************")
stop("******* ERROR: No input file directory given.  Please correct. *******")
} else if (!is.null(file.dir)){
file.dir <- file.dir
}
### Check for output directory
if (is.null(out.dir)){
out.dir <- file.dir
} else {
out.dir <- out.dir
}
if (!file.exists(out.dir)) dir.create(out.dir,recursive=TRUE)
### Check for output filename
if (!is.null(out.filename)){
out.filename <- out.filename
} else {
out.filename <- "Concat_Spectra"
}
### Remove existing file if present
unlink(paste(out.dir,out.filename,out.file.ext,sep=""),recursive=FALSE,force=TRUE)
### Get file list
in.files <- list.files(path=file.dir,pattern=in.file.ext,full.names=FALSE)
in.files.full <- list.files(path=file.dir,pattern=in.file.ext,full.names=TRUE)
num.files <- length(in.files)
spec.names <- unlist(strsplit(in.files,paste("\\",in.file.ext,sep="")))
### Stop if no files found
if (num.files<1) stop("****** No files found in directory: ",file.dir," ******")
### Display info to the terminal
tmp  <- unlist(strsplit(file.dir,dlm))
current <- tmp[length(tmp)]
print(paste("------- Processing directory: ",current))
print(paste("------- Number of files: ",num.files))
flush.console() #<--- show output in real-time
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.waves <- spec.file[,1]
dims <- dim(spec.file)
if (dims[2]>dims[1]) stop("***** ERROR: Input spectral files are not properly formatted for this function *****")
in.spec <- array(data=NA,dim=c(num.files,max(dims)))
### Read in files to concatenate
for (i in 1:num.files){
spec.file <- read.csv(paste(file.dir,dlm,in.files[i],sep=""))
in.spec[i,] <- t(spec.file[,2])
rm(spec.file)
}
### Concatenate
# If transpose requested
if (transpose){
# Convert to Spectra,Wave_x, Wave_x
if (dims[1]>dims[2]){
out.spec <- array(data=NA,dim=c(num.files,max(dims)+1))
out.spec <- as.data.frame(out.spec)
out.spec[,1] <- spec.names
dims <- dim(out.spec)
out.spec[,2:dims[2]] <- as.data.frame(in.spec)
names(out.spec) <- c("Spectra",paste("Wave_",in.waves,sep=""))
}
} else {
out.spec <- array(data=NA,dim=c(max(dims),num.files+1))
out.spec[,1] <- in.waves
out.spec[,2:(num.files+1)] <- t(in.spec)
out.spec <- as.data.frame(out.spec)
names(out.spec) <- c("Wavelength",spec.names)
}
### Output dataframe if requested
if (spec.dataframe){
return(out.spec)
}
### Output concatenated data
write.csv(out.spec,paste(out.dir,dlm,out.filename,out.file.ext,sep=""),row.names=FALSE)
} ### End of function
#==================================================================================================#
concat.spectra(file.dir=file.dir,out.filename="test.concat")
concat.spectra(file.dir=file.dir,out.filename="test.concat",transpose=TRUE)
concat.spectra(file.dir=file.dir,out.filename="test.concat",transpose=FALSE)
concat.spectra(file.dir=file.dir,out.filename="test.concat",transpose=FALSE,spec.dataframe=TRUE)
spec <- concat.spectra(file.dir=file.dir,out.filename="test.concat",transpose=FALSE,spec.dataframe=TRUE)
spec <- concat.spectra(file.dir=file.dir,out.filename="test.concat",transpose=FALSE,spec.dataframe=TRUE)
